<?php

// $Id: dchcustom_inetwebform.module,v 1.1 2010/05/21 22:14:05 tomhung Exp $
/**
 * @file
 * Allows delimited data files to be imported as results into dchcustom_inetwebforms.
 *
 * This is usefull for importing results from other systems in to Webform.
 *
 * @author John C Jemmett <jjemmett@northwind-inc.com>
 * @author Greg Bosen <gbosen@northwind-inc.com>
 * @author Joe Corall <joe.corall@gmail.com>
 *
 */

/**
 * Implements hook_menu().
 */
function dchcustom_inetwebform_menu() {
  $items = array();
  $items['node/%dchcustom_inetwebform_menu/dchcustom_inetwebform-results/upload'] = array(
    'title' => 'Upload',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dchcustom_inetwebform_form', 1),
    'access callback' => 'node_access',
    'access arguments' => array('update', 1),
    'weight' => 10,
    'type' => MENU_LOCAL_TASK,
  );
  $items['node/%dchcustom_inetwebform_menu/dchcustom_inetwebform-results/upload/%'] = array(
    'title' => 'Get Template',
    'page callback' => 'dchcustom_inetwebform_csvtemplate',
    'page arguments' => array(1, 4),
    'access callback' => 'node_access',
    'access arguments' => array('update', 1),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Creates a downloadable CSV template file corresponding to a Webform structure.
 *
 * @param $node
 *   The current dchcustom_inetwebform node.
 * @param $type
 *   The type of delimited file template to download.
 */
function dchcustom_inetwebform_csvtemplate($node, $type) {
  $types = _dchcustom_inetwebform_field_key_options();
  $filename = check_plain($node->title) . '_upload.csv';
  $headers = array();
  $node->dchcustom_inetwebform['components']['-1'] = array(
    'name' => 'Submission ID',
    'form_key' => 'SID',
  );
  if (array_key_exists($type, $types)) {

    foreach ($node->dchcustom_inetwebform['components'] as $cid => $component) {
      $ctype = ( array_key_exists('type', $component) ? $component['type'] : '' );
      if ($ctype != 'file' && $ctype != 'fieldset' && $ctype != 'markup' && $ctype != 'pagebreak') {
        $headers[] = $component[$type];
      }
    }
    $csv = join(',', $headers);

    drupal_add_http_header('Content-Type', 'application/force-download');
    drupal_add_http_header('Pragma', 'public');
    drupal_add_http_header('Cache-Control', 'max-age=0');
    drupal_add_http_header('Content-Type', 'text/csv');
    drupal_add_http_header('Content-Disposition', "attachment; filename=$filename");
    print $csv;
  }
  else {
    drupal_set_message(t('Invalid header type.'), 'warning');
    $path = explode('/', $_GET['q']);
    array_pop($path);
    $path = join('/', $path);
    drupal_goto(drupal_get_path_alias($path));
  }
}

function dchcustom_inetwebform_cron() {

  $dir = "/var/www/intranet.matrixneo.ddns.net/private/feeds/inetspeed/";
  $file_list = file_scan_directory($dir, '/.*\.csv$/');
  
  foreach($filename in $file_list) {
    _dchcustom_inetwebform_import(NULL, array(), $filename);
  } // end foreach  
}

/**
 * Function to parse the delimited file and add submissions to the database.
 *
 * @param $form
 *   The current form.
 * @param $form_state
 *   The current form values of a submission.
 *
 * @see dchcustom_inetwebform_form()
 */
function _dchcustom_inetwebform_import($form, $form_state, $file) {
  $form_state['values']['nid'] = 500;
  $form_state['values']['delimiter'] = ';';
  $form_state['values']['field_keys'] = 'form_key'; 


  global $user;

  // This makes php auto-detect mac line endings.
  ini_set('auto_detect_line_endings', TRUE);

  if (($handle = fopen($file->destination, 'r')) === FALSE) {
    // form_set_error('upload', t('File could not be opened for reading.'));
    watchdog('dchcustom_inetwebform-import', 'File read error. Could not read file %file at path %path.!details', array('%file' => $file->filename, '%path' => $file->filepath, '!results' => '<br />\n<pre>' . htmlentities(print_r($form_state['values'], TRUE)) . '</pre>'), WATCHDOG_ERROR);
    return;
  }

  module_load_include('inc', 'webform', 'includes/webform.submissions');

  $sids = array();
  $cids = array();
  $fields = array();

  $dchcustom_inetwebform = node_load(intval($form_state['values']['nid']));
  $delimiter = $form_state['values']['delimiter'];
  $delimiter = $delimiter == '\t' ? '\t' : $delimiter;
  $field_key = $form_state['values']['field_keys'];

  $keys = array();
  $keys[$field_key === 'name' ? 'Submission ID' : 'SID'] = array('form_key' => 'SID');
  foreach ($dchcustom_inetwebform->dchcustom_inetwebform['components'] as $cid => $component) {
    $component['cid'] = $cid;
    $keys[trim($component[$field_key])] = $component;
  }

  $data = array();
  $num = 0;
  $arraylen = 0;
  $c = -1;

  while (!feof($handle)) {
    $c++;
    $submitted = time();
    $data = fgetcsv($handle, 0, $delimiter);

    // Ignore empty rows.
    if ($data[0] === NULL) {
      continue;
    }

    if ($c == 0) { // This is the header row.
      $arraylen = count($data);
      foreach ($data as $k => &$v) {
        $v = _dchcustom_inetwebform_csvfieldtrim($v);
        // Identify the Key of Submitted Time
        if ($v == 'Submission DateTime' || $v == 'submitted_datetime') {
          $submitted_key = $k;
          continue;
        }
        if (!$keys[$v]) {
          // drupal_set_message(t('Can not find column @k in components list, skipping.', array('@k' => $v)), 'warning');
          watchdog('dchcustom_inetwebform', 'Cannot find column @k in components list, skipping.', array('@k' => $v), WATCHDOG_NOTICE);
        }
        elseif (isset($keys[$v]['cid'])) {
          $cids[$k] = $keys[$v]['cid'];
        }
      }

      $fields = array_flip($data);

      foreach ($keys as $k => $component) {
        if (!strcmp($k, 'name')) {
          if (!empty($component['mandatory']) && $component['type'] != 'fieldset' && !isset($fields[$k])) {
            // form_set_error('upload', t('Column @k is required but could not be found in this file. Alter the file or the dchcustom_inetwebform and try again.', array('@k' => $k)));
            watchdog('dchcustom_inetwebform', 'Column @k is required but could not be found in this file. Alter the file or the dchcustom_inetwebform and try again.', array('@k' => $k), WATCHDOG_ERROR);
          }
        }
      }

      $fields = $data;
      continue 1;
    }

    $num = count($data);
    $sid = NULL;
    if ($arraylen == $num) {
      $sub_array = array();
      foreach ($data as $k => &$v) {
        $v = _dchcustom_inetwebform_csvfieldtrim($v);
        if ($v == '') {
          // Checking mandatory field for a value.
          if (array_key_exists('mandatory', $keys[$fields[$k]]) && $keys[$fields[$k]]['mandatory']) {
            drupal_set_message(t('Required field has no value at row,col: @r,@c.  Skipping this row!', array('@r' => $c, '@c' => $k)), 'warning');
            form_set_error('dchcustom_inetwebform', 'Required field has no value at row,col: @r,@c. Skipping this row!', array('@r' => $c, '@c' => $k)), WATCHDOG_ERROR);
            continue 2;
          }
          else {
            continue 1;  // Skip field if empty.
          }
        }

        // Checking SID input security.
        if ($keys[$fields[$k]]['form_key'] === 'SID') {
          if (!is_numeric($v)) {
            drupal_set_message(t('Invalid Submission ID at row,col: @r,@c.  Skipping this row!', array('@r' => $c, '@c' => $k)), 'warning');
            continue 2;
          }
          else {
            $sid = intval($v); // Valid input security (integer values only).
          }
        }
        // It's a real component, parse and add to $sub_array.
        elseif (($cid = isset($cids[$k]) ? $cids[$k] : FALSE) !== FALSE) {
          $type = $keys[$fields[$k]]['type'];
          // Date and time components.
          if ($type === 'date' || $type === 'time') {
            if ($time = strtotime($v)) {
              $v = $type === 'date' ? date('Y-m-d', $time) : date('H:i:s', $time);
            }
            else {
              drupal_set_message(t('Invalid datetime value at row,col: @r,@c. Skipping this row!', array('@r' => $c, '@c' => $k)), 'warning');
              continue 2;
            }
          }
          // Grid and multi-select components.
          elseif ($type === 'grid' || ($type === 'select' && $keys[$fields[$k]]['extra']['multiple'] == 1)) {
            // Explode the value into an array and associate it back to the value.
            $v = explode(',', $v);
          }
          $sub_array[$cid] = $v;
        }
      }

      // Checking Submission DateTime input security.
      if ($k === $submitted_key) {
        $date = DateTime::createFromFormat("d.m.Y", $v);
        if ($date !== FALSE) {
          drupal_set_message(t('Invalid Submission Time at row,col: @r,@c.', array('@r' => $c, '@c' => $k)), 'warning');
        }
        else {
          $submitted = $v;
        }
      }
      $submission = (object) array(
            'nid' => $dchcustom_inetwebform->nid,
            'uid' => $user->uid,
            'submitted' => $submitted,
            'remote_addr' => ip_address(),
            'is_draft' => 0,
            'data' => dchcustom_inetwebform_submission_data($dchcustom_inetwebform, $sub_array),
      );

      // Determine if INSERT or UPDATE based on inclusion of SID.
      if ($sid != NULL) {
        $submission->sid = $sid;
        $sids[] = dchcustom_inetwebform_submission_update($dchcustom_inetwebform, $submission);
      }
      else {
        $sids[] = dchcustom_inetwebform_submission_insert($dchcustom_inetwebform, $submission);
      }
    }
    else {
      drupal_set_message(t('Row @c is malformed and will need to be fixed and resubmitted.', array('@c' => ($c + 1))), 'warning');
    }
  }
  fclose($handle);

  if (!file_delete($file)) {
    watchdog('dchcustom_inetwebform-import', 'File could not be deleted (cleanup process). File: %file at path %path . !details', array('%file' => $file->filename, '%path' => $file->destination, '!results' => '<br />\n<pre>' . htmlentities(print_r($form_state['values'], TRUE)) . '</pre>'), WATCHDOG_ERROR);
  }

  drupal_set_message(t('We uploaded @count submissions', array('@count' => count($sids))));
  watchdog('dchcustom_inetwebform-import', 'Submission file uploaded to %title.', array('%title' => check_plain($dchcustom_inetwebform->title), '!results' => '<br />\n<pre>' . htmlentities(print_r($form_state['values'], TRUE)) . '</pre>'));
}

/**
 * Returns a list of value delimiters we can use.
 *
 * @return
 *   An array of key/value pairs for form options list.
 */
function _dchcustom_inetwebform_delimiter_options() {
  return array(
    ',' => t('Comma (,)'),
    '\t' => t('Tab (\t)'),
    ';' => t('Semicolon (;)'),
    ':' => t('Colon (:)'),
    '|' => t('Pipe (|)'),
    '.' => t('Period (.)'),
    ' ' => t('Space ( )'),
  );
}

/**
 * Returns a list of field header types we can use.
 *
 * @return
 *   An array of key/value pairs for form options list.
 */
function _dchcustom_inetwebform_field_key_options() {
  return array(
    'name' => t('Field Names'),
    'form_key' => t('Field Form Keys'),
  );
}

/**
 * Returns a trimmed field value
 *
 * @param $value
 *   Field value to be trimmed.
 * @return
 *   Trimmed field value.
 */
function _dchcustom_inetwebform_csvfieldtrim($value) {
  $value = trim($value);
  // Strip off the beginning and ending quotes if necessary.
  $value = preg_replace('/^".*"$/', '', $value);
  // Remove control characters. Some editors add invalid EOL chars.
  // fgetcsv does not handle unicode characters therefore we replace them
  // manually. See http://bugs.php.net/bug.php?id=31632.
  $value = str_replace('\x00..\x1F\xfe\xff', '', $value);
  return $value;
}
