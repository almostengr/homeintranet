<?php

function myhouseissue_menu() {
  $items = array();

  $items['myhouse/create_ticket'] = array(
    'access callback' => TRUE,
    'page callback' => 'myhouseissue_create_ticket',
    'type' => MENU_CALLBACK,
    'title' => 'Create Ticket API',
  );

  /*
  $items['myhouse/internetno'] = array(
    'access callback' => TRUE,
    'page callback' => 'myhouseissue_no_internet',
    'type' => MENU_NORMAL_ITEM,
    'title' => 'Internet-No',
  );
  $items['myhouse/internetyes'] = array(
    'access callback' => TRUE,
    'page callback' => 'myhouseissue_yes_internet',
    'type' =>  MENU_CALLBACK ,
    'title' => 'Internet-Yes',
  );
  */

  return $items;
} // end function

function myhouseissue_create_ticket() {
  if ($_SERVER['REQUEST_METHOD'] == 'POST') {
	echo 'post';
    // // check if ticket already exists
    // $query = "select 1 from hp_node n, hp_field_data_field_issue_status stat where stat.entity_id = n.nid and n.title = :ntitle and field_issue_status_value not in ('Cancelled', 'Completed')";
    // $result = db_query($query, array(':ntitle' => $_POST['summary']));
    
    // if ( $result->rowCount == 0 ) {
      // // if zero rows are returned, then create ticket
 
	// // print_r($_POST);
	// foreach ($_POST as $key => $entry)
	// {
		 // echo $key . ": " . $entry . "<br>";
	// }
	
    // $ticketClass = new stdClass();
	
    // $ticketClass = node_object_prepare($ticketClass);

    // // Create the ticket with the details from the request
    // $ticketClass->type = "issue";
    // $ticketClass->title = $_POST['summary'];
    // $ticketClass->uid = 12;
    // $ticketClass->comment = 2;
    // $ticketClass->field_issue_status[$field_language][0]['value'] = 'Submitted';
    // $ticketClass->field_issue_type[$field_language][0]['value'] = 'Defect';
    // $ticketClass->field_issue_assignee[$field_language][0]['value'] = '3';
    // $ticketClass->field_issue_project_relate[$field_language][0]['value'] = $_POST['pid'];
    // $ticketClass->body[$field_language][0]['value'] = $_POST['error'];
	
    // node_save($ticketClass);
    // } // end if $result->rowCount ==0 
  } // end if
  else if ($_SERVER['REQUEST_METHOD'] == 'GET') {
  
    // check if ticket already exists
    $query = "select 1 from hp_node n, hp_field_data_field_issue_status stat where stat.entity_id = n.nid and n.title = :ntitle and field_issue_status_value not in ('Cancelled', 'Completed')";
    $result = db_query($query, array(':ntitle' => $_GET['summary']));
    
    if ( $result->rowCount() == 0 ) {
      // if zero rows are returned, then create ticket
 
		// print_r($_GET);
		$fullbody = "";
		foreach ($_GET as $key => $entry)
		{
			 $fullbody .= $key . ": " . $entry . "\n";
		}
		$fullbody .= "host: " . $_SERVER['REMOTE_HOST'] . "\n";
				
		// Create the ticket with the details from the request
		$ticketClass = new stdClass();
		// $ticketClass = node_object_prepare($ticketClass);
		$ticketClass->type = "issue";
		$ticketClass->title = $_GET['summary'];
		$ticketClass->language = LANGUAGE_NONE;
		node_object_prepare($ticketClass);
		$ticketClass->uid = 12;
		$ticketClass->comment = 2;
		$ticketClass->field_issue_status[LANGUAGE_NONE][0]['value'] = 'Submitted';
		$ticketClass->field_issue_type[LANGUAGE_NONE][0]['value'] = 'Defect';
		$ticketClass->field_issue_assignee_target_id[LANGUAGE_NONE][0]['value'] = 3;
		$ticketClass->field_issue_assignee[LANGUAGE_NONE][0]['value'] = 3;
		$ticketClass->field_issue_priority[LANGUAGE_NONE][0]['value'] = $_GET['urg'];
		$ticketClass->field_issue_project_relate_target_id[LANGUAGE_NONE][0]['value'] = $_GET['proj'];
		$ticketClass->field_issue_project_relate[LANGUAGE_NONE][0]['value'] = $_GET['proj'];
		// $ticketClass->field['field_issue_status']['und'][0]['value'] = 'Submitted';
		// $ticketClass->field['field_issue_type']['und'][0]['value'] = 'Defect';
		// $ticketClass->field['field_issue_assignee']['und'][0]['value'] = 3;
		// $ticketClass->field['field_issue_priority']['und'][0]['value'] = $_GET['urg'];
		// $ticketClass->field['field_issue_project_relate']['und'][0]['value'] = $_GET['proj'];
		$ticketClass->body[LANGUAGE_NONE][0]['value'] = $fullbody;
		
		$ticketClass = node_submit($ticketClass);
		node_save($ticketClass);
    } // end if $result->rowCount ==0 
  } // end if
  else {
	echo 'nope';
  }
} // end function

function myhouseissue_services_resources() {
  return array(
    'issue' => array(
      'create' => array(
        'callback' => '_myhouseissue_create_node',
        'access callback' => TRUE,
        'args' => array(
          array(
            'name' => 'node',
            'optional' => FALSE,
            'source' => 'data',
            'description' => 'The node data to create',
            'type' => 'array',
          ), // end array
        ), // end args
      ), // end create 
    ), // end issue 
  ); // return 
} // end function

/**
 * // http://www.drupalwoo.com/content/blog/drupal-services-creating-node-from-external-form
 */
function _myhouseissue_create_node($arg) {
  if ($arg) {
    // create the node 
    $node = new stdClass();
    $node->type = 'issue';
    $node->title = $arg['name'];
    $node->language = LANGUAGE_NODE;
    $node->uid = 0;
    node_object_prepare($node);

    // create a map of predefined POST args to Drupal fields
    $map = array(
      'p' => 'field_issue_priority',
      'm' => 'body',
      't' => 'field_issue_type',
      'r' => 'field_issue_project_relate',
    );

    // array to store both mapped and unmapped fields
    $node_fields = array();

    // what predefined args have been passed? 
    $arr1 = array_intersect_key($arg, $map);

    // build an array associating Drupal fieldnames to arg values
    foreach($arr1 as $key => $value) {
      $field = $map[key];   // get the drupal field that matches
      $node_fields[$field] = $value;
    } // end foreach

    // what undefined args have been passed? 
    $arr2 = array_diff_key($arg, $map);
   
    // associate unknown arg values with the 'general info' field on our issue
    foreach($arr2 as $key => $value) {
      if (isset($node_fields['field_general_info'])) {
        $node_fields['field_general_info'] .= $key . " | " . $value . "\n";
      } else {
        $node_fields['field_general_info'] = $key . " | " . $value . "\n";
      }
    } // end foreach

    // save all arg values as drupal fields
    foreach($node_fields AS $key => $value) {
      $node->{$key}[$node->language][0]['value'] = $value;
    }

    // save the node 
    $node = node_submit($node);
    node_save($node);
  } else {
    // error if no args were passed
    return services_error(t('No data submitted!'), 406, t('No data submitted!'));
  } // end if
} // end function


